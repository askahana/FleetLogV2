@page "/driverdetails/{Id:int}"
@inject ApplicationDbContext _app
@rendermode InteractiveServer

@if(Driver is null)
{
    <p>No Driver info is available.</p>
}
else
{
     <div class="m-3 card shadow">
        <div class="row">
            <div class="col-8">
                <table class="mx-5 py-5 my-3 w-100">

                    <tr>
                        <th class="h2">Driver ID:</th>
                        <td class="h2">@Driver.DriverId</td>
                    </tr>
                    <tr>
                        <th class="h2">Driver Name:</th>
                        <td class="h2">@Driver.DriverName</td>
                    </tr>
                    <tr>
                        <th class="h2">Car Registration:</th>
                        <td class="h2">@Driver.CarReg</td>
                    </tr>
                    <tr>
                        <th class="h2">Manager:</th>
                        <td class="h2">@(Driver.Employee?.EmployeeName ?? "None")</td>
                    </tr>
                  @*   @if (Driver.Event != null && Driver.Event.Any())
                    {
                        <tr class=""><th class="h2">Between
                                <span class="text-shadow">@startDate.ToShortDateString()</span> and
                                <span class="text-shadow">@endDate.ToShortDateString()</span>
                            </th>
                        </tr>
                    <tr>
                        <th class="h2">Total income</th>
                        <td class="h2">@GetSum().ToString("c")</td>
                    </tr>
                    <tr>
                        <th class="h2">Total expense</th>
                        <td class="h2">@GetSumExpense().ToString("c")</td>
                    </tr>
                    } *@
                </table>
            </div>
            <div class="col-2 mt-3 ">
                <img src="@($"/images/drivers/driver{Driver.DriverId}.jpg")" alt="Alternate Text" class="img-fluid rounded-circle"
                     style="width:180px; height:180px; background-position:center;"
                     onerror="this.onerror=null;this.src='/images/avatar.png';" />
            </div>
        </div>
        <div class="row mb-2 justify-content-end">
            <div class="col-auto">
                <a class="btn btn-none btn-sm fw-bold text-info fs-5 me-2 pressed" @onclick="ShowModal"><i class="fa-solid fa-file-circle-plus me-1"></i>Add new task</a>
            </div>
        </div>
        @if (Driver.Event != null && Driver.Event.Any())
        {
            <QuickGrid Items=FilteredEvent Pagination="pagination">
                <PropertyColumn Property="e => e.EventId" Sortable="true" Title="ID" Class="py-1 px-3 border-1"></PropertyColumn>
                <PropertyColumn Property="e => e.EventType" Sortable="true" Title="Task/ Incident" Class="mx-3 py-1 px-3 border-1">
                    <ColumnOptions>
                        <input type="search" autofocus @bind="eventFilter"
                               @bind:event="oninput" placefoler="Task name" />
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="e => e.TimeStamp" Sortable="true" Title="Date" Class="py-1 px-3 border-1">
                    <ColumnOptions>
                        <input type="date" @bind="startDate" @bind:event="oninput" />
                        <input type="date" @bind="endDate" @bind:event="oninput" />
                    </ColumnOptions>
                </PropertyColumn>
                <PropertyColumn Property="e => e.AmountIn" Sortable="true" Title="Income" Class="py-1 px-3 border-1"></PropertyColumn>
                <PropertyColumn Property="e => e.AmountOut" Sortable="true" Title="Expense" Class="py-1 px-3 border-1"></PropertyColumn>
                <TemplateColumn Title="Ohters" Class="py-1 px-3 border-1 text-black" Align="Align.Center">
                    <a class="btn btn-none btn-sm fw-bold text-info pressed" @onclick="() => EditTaskClicked(context)"><i class="fa-regular fa-pen-to-square"></i></a>
                    <a class="btn btn-none btn-sm fw-bold text-info pressed"
                       @onclick="() => DeleteTaskClicked(context)"><i class="fa-regular fa-trash-can"></i></a>
                </TemplateColumn>
            </QuickGrid>
            <Paginator State="@pagination"></Paginator>
        }
        else
        {
            <h1 class="mx-5 my-3 text-shadow">No events found for this driver.</h1>
        }
    </div>
    <GoBack/>


<JobModal @ref="jobModal" Event="Event" HandleAddEvent="HandleAddEvent"
            HandleConfirmDeleteEvent="HandleConfirmDeleteEvent"
         HandleEditEvent ="HandleEditEvent"> 
</JobModal>
<style>
    tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.3);
    }
</style>
}


@code {
    private Driver Driver = new Driver();
    JobModal jobModal;
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public Event Event { get; set; } = new();
    // These are for filtering.
    private string? eventFilter;
    private DateTime startDate = DateTime.Now.AddDays(-50);
    private DateTime endDate = DateTime.Now;
    IQueryable<Event> FilteredEvent
    {
        get
        {
            var result = Driver.Event.AsQueryable();
            if (!string.IsNullOrEmpty(eventFilter))
            {
                result = result.Where(d => d.EventType.ToString().Contains(eventFilter, StringComparison.CurrentCultureIgnoreCase));
            }
            result = result
            .Where(e => e.TimeStamp >= startDate && e.TimeStamp <= endDate);

            return result;
        }
    }

    private PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };
    protected override async Task OnInitializedAsync()
    {
        Driver = await _app.Drivers.Include(d => d.Event).Include(d=> d.Employee).FirstOrDefaultAsync(d => d.DriverId == Id);
    }

    // Add
    private async Task ShowModal()
    {
        Event = new Event();
        jobModal.ChangeTitle("Add new");
        jobModal.LoadDefault();
        await jobModal.OpenModal();
    }

    private async Task HandleAddEvent(Event incomingEvent)
    {
        incomingEvent.DriverId = Driver.DriverId;
        var newEvent = _app.Events.Add(incomingEvent);
        // await _app.Drivers.Event.AddAsync(newEvent);
        await _app.SaveChangesAsync();
        jobModal.ClearContainer();
        Event = new Event();
    }

    //Edit
    private async Task EditTaskClicked(Event incomingEvent)
    {
        Event = incomingEvent;
        jobModal.ChangeTitle("Edit");
        jobModal.LoadDefault();
        await jobModal.OpenModal();
    }
    private async Task HandleEditEvent(Event incomingEvent)
    {
        // Edit
        if(incomingEvent.EventId > 0)
        {
            var eventEdit = _app.Events.FirstOrDefault(d => d.EventId == incomingEvent.EventId);
            if(eventEdit is null) return;
            eventEdit.EventType = incomingEvent.EventType;
            eventEdit.TimeStamp = incomingEvent.TimeStamp;
            eventEdit.AmountIn = incomingEvent.AmountIn;
            eventEdit.AmountOut = incomingEvent.AmountOut;
            await _app.SaveChangesAsync();
            await jobModal.HideModal();
            return;
        }
    }

    //Delete
    private async Task DeleteTaskClicked(Event thisEvent)
    {
        Event = thisEvent;
        jobModal.ChangeTitle("Delete");
        jobModal.ShowDeleteConfirmDialog();
        await jobModal.OpenModal();
    }
    private async Task HandleConfirmDeleteEvent()
    {
        if (Event is null) return;
        _app.Events.Remove(Event);
        await _app.SaveChangesAsync();
        await jobModal.HideModal();
    }

    private decimal GetSum()
    {
        return FilteredEvent.Sum(e => e.AmountIn);
    }
    private decimal GetSumExpense()
    {
        return FilteredEvent.Sum(e => e.AmountOut);
    }
}
