@inject IJSRuntime js

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        @if (ShowMainContent)
        {
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">@Title manager</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="Employee" OnValidSubmit="Save">
                        <DataAnnotationsValidator />
                        <div class="form-group mb-2">
                            <label class="form-label mb-1" for="name">Manager's name</label>
                            <InputText @bind-Value="Employee.EmployeeName" class="form-control"></InputText>
                            <ValidationMessage For="() => Employee.EmployeeName" TValue="string"></ValidationMessage>
                        </div>
                        <div class="form-group mb-2">
                            <label class="form-label mb-1" for="email">Email</label>
                            <InputText @bind-Value="Employee.Email" class="form-control"></InputText>
                            <ValidationMessage For="() => Employee.Email"></ValidationMessage>
                        </div>
                       
                      
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary pressed" data-bs-dismiss="modal">Close</button>
                            <button type="submit" class="btn btn-primary pressed">Save</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        @if (ShowDeleteConfirmation)
        {
            <div class="modal-content">
                <div class="modal-header border-0">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">@Title manager</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body border-0">
                    <div>
                        <h3>Are you sure to remove this person?</h3>
                    </div>
                    <div class="modal-footer border-0 hstack gap-2">
                        <form method="dialog">
                            <button type="button" class="btn btn-secondary pressed" data-bs-dismiss="modal">Cancel</button>
                            <button type="button" class="btn btn-primary pressed" data-bs-dismiss="modal" @onclick="() => ConfirmDelete(true)">Delete</button>
                        </form>
                    </div>
                </div>
            </div>
        }
    </div>
</div>
<script>
    function openModal(modalId) {
        var modal = new bootstrap.Modal(document.getElementById(modalId));
        modal.show();
    }
    function closeModal(modalId){
        var modalElement = document.getElementById(modalId);
        var modal = bootstrap.Modal.getInstance(modalElement);
        if (modal) {
            modal.hide();
            modalElement.addEventListener('hidden.bs.modal', function () {
                document.body.classList.remove('modal-open');
                document.querySelector('.modal-backdrop').remove();
            }, { once: true });
        }
    }
</script>

@code {
    public string Title { get; set; } = "Add new";

    public void ChangeTitle(string title)
    {
        Title = title;
    }
    [Parameter]
    public Employee Employee { get; set; } = new Employee();

    [Parameter]
    public EventCallback<Employee> HandleRegisterEmployee { get; set; }
    [Parameter]
    public EventCallback<Employee> HandleEditEmployee { get; set; }
    [Parameter]
    public EventCallback HandleConfirmDeleteEmployee { get; set; }

    public void ClearContainer()
    {
        Employee = new Employee();
    }
    private async Task Save()
    {
        if (Title == "Register new")
        {
            await HandleRegisterEmployee.InvokeAsync(Employee);
        }
        if (Title == "Edit")
        {
            await HandleEditEmployee.InvokeAsync(Employee);
        }

    }

    // This is bool to show either add/edit or delete.
    private bool ShowMainContent { get; set; } = true;
    private bool ShowDeleteConfirmation { get; set; } = false;
    public void LoadDefault()
    {
        ShowMainContent = true;
        ShowDeleteConfirmation = false;
    }
    public void ShowDeleteConfirmDialog()
    {
        ShowMainContent = false;
        ShowDeleteConfirmation = true;
    }

    public async Task OpenModal()
    {
        await js.InvokeVoidAsync("openModal", "staticBackdrop");
    }
    public async Task HideModal()
    {
        await js.InvokeVoidAsync("closeModal", "staticBackdrop");
    }

    private async Task ConfirmDelete(bool response)
    {
        if (response)
        {
            await HandleConfirmDeleteEmployee.InvokeAsync();
            ShowDeleteConfirmDialog();
        }
    }
}
