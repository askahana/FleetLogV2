@page "/managers"
@inject ApplicationDbContext _context
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles ="Admin")]

<h2 class="text-shadow mt-2 ms-4">Managers list<img class="mb-2" src="/images/employee1.png" alt="Alternate Text" style="width:80px;" /></h2>
@if(EmployeeList is null)
{
    <p>No manager found.</p>
}
else
{
    <div class="m-3 card shadow">
        <div class="text-end m-2">
            <a class="btn btn-none btn-sm fw-bold text-info fs-5 pressed" @onclick="AddClicked"><i class="fa-solid fa-file-circle-plus me-1"></i>Register new manager</a>
        </div>
        <QuickGrid Items="FilteredManager" Pagination="pagination">
            <PropertyColumn Property="e=> e.EmployeeName" Sortable="true" Class="py-1 px-2 border-1 col-1 " Align="Align.Center">
                <ColumnOptions>
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="e=> e.Email" Class="py-1 px-2 border-1 col-1" Sortable="true" Align="Align.Center"></PropertyColumn>
            <TemplateColumn Title="Action" Align="Align.Center" Class="py-1 px-2 border-1 col-1 text-black">
                <a href="/managerdetails/@context.EmployeeId" class="btn btn-none btn-sm fw-bold text-info pressed"><i class="fa-solid fa-magnifying-glass-plus"></i></a>
                <a class="btn btn-none btn-sm fw-bold text-info pressed" @onclick="() => EditClicked(context)"><i class="fa-regular fa-pen-to-square"></i></a>
                <a class="btn btn-none btn-sm fw-bold text-info pressed" @onclick="() => DeleteClicked(context)"><i class="fa-regular fa-trash-can"></i></a>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="@pagination"></Paginator>
    <GoBack />
    <ManagerModal @ref="modal" Employee="Employee" HandleRegisterEmployee="HandleAdd"
        HandleEditEmployee="HandleEdit" HandleConfirmDeleteEmployee="HandleRemove"></ManagerModal>
<style>
        tbody tr:hover {
            background-color: rgba(0, 123, 255, 0.3);
        }
</style>
}

@code {
    [Parameter]
    public int Id { get; set; }
    [Parameter]
    public Employee Employee { get; set; } = new Employee();

    ManagerModal modal;


    List<Employee> EmployeeList;
    protected override async Task OnInitializedAsync()
    {
        EmployeeList = await _context.Employees.ToListAsync();
    }
    private PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };
    private string? nameFilter;
    private async Task GoRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
    private IQueryable<Employee> FilteredManager
    {
        get
        {
            var result = EmployeeList.AsQueryable();
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(d => d.EmployeeName.ToLower()
                .Contains(nameFilter.ToLower()));
            }
            return result;
        }
    }


    // Add
    private async Task AddClicked()
    {
        modal.ChangeTitle("Register new");
        Employee = new();
        modal.LoadDefault();
        await modal.OpenModal();
    }
    private async Task HandleAdd(Employee newManager)
    {
        await _context.Employees.AddAsync(newManager);
        await _context.SaveChangesAsync();
        EmployeeList = await _context.Employees.ToListAsync();
        await modal.HideModal();
    }


    // Edit
    private async Task EditClicked(Employee incomingEmployee)
    {
        modal.ChangeTitle("Edit");
        Employee = incomingEmployee;
        modal.LoadDefault();
        await modal.OpenModal();
    }

    private async Task HandleEdit(Employee incomingEmployee)
    {
        var empToEdit = await _context.Employees.FirstOrDefaultAsync
        (e => e.EmployeeId == incomingEmployee.EmployeeId);
        if (empToEdit is null) return;
        empToEdit.EmployeeName = incomingEmployee.EmployeeName;
        empToEdit.Email = incomingEmployee.Email;
        await _context.SaveChangesAsync();
        EmployeeList = await _context.Employees.ToListAsync();
        await modal.HideModal();
    }

    // Delete
    private async Task DeleteClicked(Employee incomingEmployee)
    {
        Employee = incomingEmployee;
        modal.ChangeTitle("Remove");
        modal.ShowDeleteConfirmDialog();
        await modal.OpenModal();
    }
    private async Task HandleRemove()
    {
        _context.Employees.Remove(Employee);
        await _context.SaveChangesAsync();
        EmployeeList = await _context.Employees.ToListAsync();
        await modal.HideModal();

    }
}
