@page "/managers"
@inject ApplicationDbContext _context
@rendermode InteractiveServer
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles ="Admin, Employee")]
<h3 class="text-shadow mt-2 ms-4">Managers list</h3>
@if(EmployeeList is null)
{
    <p>No manager found.</p>
}
else
{

    <div class="m-3 card shadow">
        <div class="text-end m-2">
            <a class="btn btn-none btn-sm fw-bold text-info fs-5 pressed" ><i class="fa-solid fa-file-circle-plus me-1"></i>Register new manager</a>
        </div>
        <QuickGrid Items="FilteredManager" Pagination="pagination">
            <PropertyColumn Property="e=> e.EmployeeName" Class="py-1 px-2 border-1 col-1">
                <ColumnOptions>
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" />
                </ColumnOptions>
            </PropertyColumn>
            <PropertyColumn Property="e=> e.Email" Class="py-1 px-2 border-1 col-1"></PropertyColumn>
            <TemplateColumn Title="Action" Align="Align.Center" Class="py-1 px-2 border-1 col-1">
                <a href="" class="btn btn-warning pressed">Details</a>
                <a href="" class="btn btn-info pressed">Edit</a>
                <a href="" class="btn btn-danger pressed">Delete</a>
            </TemplateColumn>
        </QuickGrid>
    </div>
    <Paginator State="@pagination"></Paginator>
}
<style>
    tr:hover {
        background-color: rgba(0, 123, 255, 0.3);
    }
</style>
}

@code {
    [Parameter]
    public int Id { get; set; }

    List<Employee> EmployeeList;
    protected override async Task OnInitializedAsync()
    {
        EmployeeList = await _context.Employees.ToListAsync();
    }
    private PaginationState pagination = new PaginationState() { ItemsPerPage = 10 };
    private string? nameFilter;
    private async Task GoRegister()
    {
        NavigationManager.NavigateTo("/register");
    }
    private IQueryable<Employee> FilteredManager
    {
        get
        {
            var result = EmployeeList.AsQueryable();
            if (!string.IsNullOrEmpty(nameFilter))
            {
                result = result.Where(d => d.EmployeeName.ToLower()
                .Contains(nameFilter.ToLower()));
            }
            return result;
        }
    }
}
